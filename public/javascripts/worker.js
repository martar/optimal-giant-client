// Generated by CoffeeScript 1.3.3
(function() {
  var findCoords, getCurveCoordinates, vectorDistance;

  importScripts('solver.js');

  'finds the coordinates from the length of the vector and \ntan angle of inclination of the velocity vector';


  findCoords = function(vProp, length) {
    var coor;
    coor = [];
    coor.push(length / (Math.sqrt(1 + vProp * vProp)));
    coor.push(vProp * length / (Math.sqrt(1 + vProp * vProp)));
    return coor;
  };

  getCurveCoordinates = function(timeSteep, endPoint, skier, granulation) {
    var kappa, x;
    kappa = skier.computeKappa(endPoint);
    while (!skier.isNear(endPoint)) {
      skier.move(timeSteep, kappa, 1);
    }
    return ((function() {
      var _i, _len, _ref, _results, _step;
      _ref = skier.getPositions();
      _results = [];
      for (_i = 0, _len = _ref.length, _step = granulation; _i < _len; _i += _step) {
        x = _ref[_i];
        _results.push(x);
      }
      return _results;
    })()).reverse();
  };

  vectorDistance = function(vector) {
    return Math.sqrt(Math.pow(vector[0], 2) + Math.pow(vector[1], 2));
  };

  self.onmessage = function(ev) {
    var endPoint, kappa, lol, pos, skier, skier2, skier3, skiers, start, startPoint, steep, steepPositions, vcoord, vstart, _i, _len;
    start = Date.now();
    vstart = [0, 0.001];
    startPoint = [0, 0];
    skier = new Skier(this.mi = 0.00, this.m = 60, this.C = 0.0, this.A = 0.2, this.solver = new OptimalGiant.Solver, this.x0 = startPoint, this.v0 = vstart);
    steep = 0.001;
    endPoint = [10, 10];
    steepPositions = getCurveCoordinates(steep, endPoint, skier, 1000);
    skier2 = new Skier(this.mi = 0.00, this.m = 60, this.C = 0.0, this.A = 0.2, this.solver = new OptimalGiant.Solver, this.x0 = startPoint, this.v0 = vstart);
    for (_i = 0, _len = steepPositions.length; _i < _len; _i++) {
      pos = steepPositions[_i];
      skier2.moveStraightToPoint(pos, steep);
    }
    vcoord = vectorDistance(vstart) / 1.42;
    skier3 = new Skier(this.mi = 0.00, this.m = 60, this.C = 0.0, this.A = 0.2, this.solver = new OptimalGiant.Solver, this.x0 = startPoint, this.v0 = [vcoord, vcoord]);
    kappa = 0.000001;
    skier3.moveToPoint(endPoint, steep, kappa, 1);
    skier3.color = "blue";
    skiers = [];
    skier.color = "red";
    skiers.push(skier);
    skiers.push(skier2);
    skiers.push(skier3);
    lol = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = skiers.length; _j < _len1; _j++) {
        skier = skiers[_j];
        _results.push({
          time: skier.result,
          positions: skier.getPositions(),
          color: skier.color,
          diff: skier.positions[0]
        });
      }
      return _results;
    })();
    return postMessage({
      skiers: lol
    });
  };

}).call(this);
