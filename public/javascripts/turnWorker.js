// Generated by CoffeeScript 1.3.3
(function() {

  importScripts('optimizePoints.js');

  importScripts('solver.js');

  importScripts('gate.js');

  importScripts('localOptAlgorithm.js');

  self.onmessage = function(ev) {
    var a, bestLocal, bestsAndWorstInIterations, crossNr, duration, gate, gates, i, lambda, left, mutateProb, pop, populationCount, skier, skiers, start, vLen;
    start = Date.now();
    populationCount = 30;
    vLen = 0.1;
    left = [0, 1, 0, 0, 1, 0, 1, 0];
    gates = (function() {
      var _i, _len, _ref, _results;
      _ref = ev.data.gates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        gate = _ref[i];
        _results.push(new Gate(gate, left[i]));
      }
      return _results;
    })();
    pop = new PointTurns(4, populationCount, vLen, gates);
    crossNr = 10;
    mutateProb = 1;
    lambda = 100;
    bestsAndWorstInIterations = new Optimization(pop, mutateProb, lambda).compute();
    bestLocal = new LocalOptimization(pop.idvs[0].skier, ev.data.gates, vLen).compute();
    bestLocal.color = "red";
    skiers = [pop.idvs[0].skier, bestLocal];
    duration = Date.now() - start;
    return postMessage({
      type: 'final',
      iterations: bestsAndWorstInIterations,
      bestTime: pop.idvs[0].fitness,
      duration: duration,
      skiers: (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = skiers.length; _i < _len; _i++) {
          skier = skiers[_i];
          _results.push({
            time: skier.result,
            positions: skier.getPositions(),
            color: skier.color
          });
        }
        return _results;
      })(),
      points: (function() {
        var _i, _len, _ref, _results;
        _ref = pop.idvs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          _results.push({
            val: a.value
          });
        }
        return _results;
      })()
    });
  };

}).call(this);
