// Generated by CoffeeScript 1.3.3
(function() {

  importScripts('optimizePoints.js');

  importScripts('solver.js');

  self.onmessage = function(ev) {
    var a, best, bestsAndWorstInIterations, crossNr, duration, endPoint, mutateProb, pop, populationCount, skier, skiers, start, vLen;
    start = Date.now();
    populationCount = 20;
    vLen = 0.1;
    endPoint = [[5, 5], [0, 10], [5, 15], [4, 20], [7, 25], [3, 30]];
    pop = new PointTurns(1, populationCount, vLen, endPoint);
    crossNr = 6;
    mutateProb = 1;
    bestsAndWorstInIterations = new Optimization(pop, crossNr, mutateProb).compute();
    skiers = (function() {
      var _i, _len, _ref, _results;
      _ref = pop.idvs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        best = _ref[_i];
        _results.push(best.skier);
      }
      return _results;
    })();
    duration = Date.now() - start;
    return postMessage({
      type: 'final',
      iterations: bestsAndWorstInIterations,
      bestTime: pop.idvs[0].fitness,
      duration: duration,
      skiers: (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = skiers.length; _i < _len; _i++) {
          skier = skiers[_i];
          _results.push({
            time: skier.result,
            positions: skier.getPositions(),
            color: skier.color
          });
        }
        return _results;
      })(),
      points: (function() {
        var _i, _len, _ref, _results;
        _ref = pop.idvs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          _results.push({
            val: a.value
          });
        }
        return _results;
      })()
    });
  };

}).call(this);
